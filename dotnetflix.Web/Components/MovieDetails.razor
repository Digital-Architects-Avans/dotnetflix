@using dotnetflix.Models.Dtos.Movie
@using dotnetflix.Models.Dtos.Show
@using System.Globalization
@using dotnetflix.Web.Services

<div class="card mb-3 border-0" style="max-width: 540px;">
    <div class="row g-0">
        <div class="col-md-4">
            <img src="/images/@Movie?.Image" class="img-fluid rounded" alt="..." style="max-height: 250px;">
        </div>
        <div class="col-md-8">
            <div class="card-body">
                <h5 class="card-title">@Movie?.Title (@Movie?.Year)</h5>
                <p class="card-text">@Movie?.Description</p>
                <p class="card-text">
                    <small class="text-body-secondary">Run time: @Movie?.Runtime min</small>
                </p>
                <p class="card-text">
                    <small class="text-body-secondary">Rating: @Movie?.Rating</small>
                </p>
                <small class="text-body-secondary">First shown: @FirstShowDate days ago</small>
            </div>
        </div>
    </div>
</div>
@if (Show != null)
{
    <div class="card border-0">
        <div class="card-body">
            <h5 class="card-title text-black">@StartTime - @EndTime</h5>
            <h6 class="card-subtitle mb-2 text-body-secondary">@Show.TheaterName</h6>
            <p class="card-text">@Show.Type</p>
            <p class="card-text">
                <small class="text-body-secondary">From @Show.BasePrice.ToString(format: "C", provider: new CultureInfo("nl-NL")).Replace(".", ",")</small>
            </p>
        </div>
    </div>
}

@code {

    // Parameter to be passed to the component
    [Parameter] public MovieDto? Movie { get; set; }
    [Parameter] public ShowDto? Show { get; set; }
    [Parameter] public string? StartTime { get; set; }
    [Parameter] public string? EndTime { get; set; }

    [Inject]
    public IShowService? ShowService { get; set; }

    private IEnumerable<ShowDto>? Shows { get; set; }
    private int FirstShowDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Show != null)
        {
            // Convert date to time in 24-hour format
            StartTime = Show.Date.ToString("HH:mm");
            // Get end time by adding screen time to start time
            EndTime = Show.Date.AddMinutes(Show.ScreenTime).ToString("HH:mm");
        }

        if (ShowService != null)
        {
            Shows = await ShowService.GetShows();
        }

        var firstShow = Shows?.Where(s => s.MovieId == Movie?.Id).Select(s => s.Date).Min();
        FirstShowDate = (firstShow != null) ? DateTime.Now.DayOfYear - firstShow.Value.DayOfYear : 0;
    }
}