@using dotnetflix.Models.Dtos.Seat
@using dotnetflix.Models.Dtos.Theater
@using dotnetflix.Models.Dtos.TheaterRow
@using dotnetflix.Models.Dtos.TicketType

@if (Seats != null && Seats.Any())
{
    <div class="theater-container rounded">
        <ul class="showcase">
            <li>
                <div class="seat"></div>
                <small>Available</small>
            </li>
            <li>
                <div class="seat selected"></div>
                <small>Selected</small>
            </li>
            <li>
                <div class="seat occupied"></div>
                <small>Occupied</small>
            </li>
        </ul>

        <div class="container">
            <div class="screen mb-5"></div>
            <div class="theater">
                @foreach (var rowGroup in Seats.GroupBy(s => s.RowNumber).OrderBy(g => g.Key))
                {
                    <div class="row">
                        @foreach (var seat in rowGroup.OrderBy(s => s.SeatNumber))
                        {
                            // Check if the seat is available
                            bool isAvailable = AvailableSeats?.Any(s => s.Id == seat.Id) ?? false;
                            // Add the "occupied" class if the seat is not available
                            string seatClass = isAvailable ? "" : "occupied";

                            <div class="seat @(SelectedSeats.Contains(seat) ? "selected" : seatClass)"
                                 @onclick="() => ToggleSeatSelection(seat)"
                                 style="cursor: @(isAvailable ? "pointer" : "not-allowed")">
                                <span>@seat.SeatNumber</span>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}
else
{
    <p>No seats available for this show.</p>
}

@code {
    [Inject] IShowService? ShowService { get; set; }
    [Inject] ISeatService? SeatService { get; set; }

    [Parameter] public int ShowId { get; set; }
    [Parameter] public EventCallback<List<SeatDto>> OnSeatSelectionChange { get; set; }

    private ShowDto? Show { get; set; }

    private IEnumerable<SeatDto>? Seats { get; set; }
    private IEnumerable<SeatDto>? AvailableSeats { get; set; }
    public List<SeatDto> SelectedSeats { get; set; } = new List<SeatDto>();

    private IEnumerable<TicketTypeDto>? TicketTypes { get; set; }
    public Dictionary<int, int> SelectedTicketTypes { get; set; } = new Dictionary<int, int>();

    // Todo: Temporary seat reservation when a seat is selected?

    protected override async Task OnInitializedAsync()
    {
        if (ShowService != null && SeatService != null)
        {
            Show = await ShowService.GetShow(ShowId);
            if (Show != null)
            {
                Seats = await SeatService.GetAllSeatsForTheater(Show.TheaterId);
                AvailableSeats = await SeatService.GetAvailableSeatsForShow(ShowId);
            }
        }
    }

    private void ToggleSeatSelection(SeatDto seat)
    {
        // Check if the seat is available
        bool isAvailable = AvailableSeats?.Any(s => s.Id == seat.Id) ?? false;

        // If the seat is not available, return without adding it to the selection
        if (!isAvailable)
        {
            return;
        }

        if (SelectedSeats.Contains(seat))
        {
            SelectedSeats.Remove(seat);
        }
        else
        {
            // Check if the maximum number of seats (10) is already selected
            if (SelectedSeats.Count < 10)
            {
                SelectedSeats.Add(seat);
            }
            else
            {
                Console.WriteLine("Maximum number of seats (10) already selected.");
            }
        }

        // Trigger the EventCallback with the updated SelectedSeats list
        OnSeatSelectionChange.InvokeAsync(SelectedSeats);
        Console.WriteLine("Updated SelectedSeats: " + SelectedSeats.Count);
    }

}