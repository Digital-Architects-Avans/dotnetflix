@using dotnetflix.Models.Dtos
@using dotnetflix.Models.Dtos.Movie
@using dotnetflix.Models.Dtos.Show
@inject IJSRuntime JSRuntime
@using SelectPdf


@if (Ticket == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <div>
            <hr />
            <h4>@Movie.Title (@Movie.Year) @StartTime - @EndTime</h4>
            <hr />
            <dl class="row">
                <dt class="col-sm-2">Theater:</dt>
                <dd class="col-sm-10">@Ticket.TheaterName - @Show.Type</dd>

                <dt class="col-sm-2">Show Time:</dt>
                <dd class="col-sm-10">@Ticket.ShowTime</dd>

                <dt class="col-sm-2">Seat:</dt>
                <dd class="col-sm-10">Row @Ticket.RowNumber, Seat @Ticket.SeatNumber</dd>

                <dt class="col-sm-2">Ticket Type:</dt>
                <dd class="col-sm-10">@Ticket.TicketTypeId</dd>

                <dt class="col-sm-2">Price:</dt>
                <dd class="col-sm-10">@Ticket.TicketPrice</dd>
            </dl>
        </div>
        <button @onclick="PrintTicket">Print Ticket</button>
    </div>
    
    
}

@code {
    // Parameter to be passed to the component
    [Parameter] public TicketDto Ticket { get; set; } = new TicketDto();
    [Parameter] public MovieDto Movie { get; set; } = new MovieDto();
    // Parameter to be passed to the component
    [Parameter] public ShowDto Show { get; set; } = new ShowDto();
    [Parameter] public string StartTime { get; set; } = "00:00";
    [Parameter] public string EndTime { get; set; } = "00:00";

    protected override Task OnInitializedAsync()
    {
        // Convert date to time in 24-hour format
        StartTime = Show.Date.ToString("HH:mm");
        // Get end time by adding screen time to start time
        EndTime = Show.Date.AddMinutes(Show.ScreenTime).ToString("HH:mm");
        return Task.CompletedTask;
    }
    
    // private void PrintTicket()
    // {
    //     Document.Create(container =>
    //         {
    //             container.Page(page =>
    //             {
    //                 page.Margin(50);
    //                 page.Size(PageSizes.A6);
    //                 page.PageColor(Colors.White);
    //                 page.DefaultTextStyle(x => x.FontSize(16));
    //
    //                 page.Header()
    //                     .AlignCenter()
    //                     .Text($"Ticket for {Movie.Title} at {Show.Date}")
    //                     .SemiBold().FontSize(24).FontColor(Colors.Grey.Darken4);
    //
    //                 page.Content()
    //                     .Table(table =>
    //                     {
    //                         table.ColumnsDefinition(columns =>
    //                         {
    //                             columns.ConstantColumn(20);
    //                             columns.RelativeColumn();
    //                             columns.RelativeColumn();
    //                         });
    //
    //                         table.Header(header =>
    //                         {
    //                             header.Cell().Text("Theater");
    //                             header.Cell().Text("Show Time");
    //                             header.Cell().Text("Seat");
    //                             header.Cell().Text("Ticket Type");
    //                             header.Cell().Text("Price");
    //                         });
    //
    //                             table.Cell().Text(Ticket.Id.ToString());
    //                             table.Cell().Text(Ticket.ShowTime.ToString());
    //                             table.Cell().Text($"Row {Ticket.RowNumber}, Seat {Ticket.SeatNumber}");
    //                             table.Cell().Text(Ticket.TicketTypeId);
    //                             table.Cell().Text(Ticket.TicketPrice.ToString());
    //
    //                     });
    //             });
    //         })
    //         .GeneratePdf("ticket.pdf");;
    // }
    
    private async Task PrintTicket()
    {
        var jsPdf = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", "new window.jsPDF()");

        await jsPdf.InvokeVoidAsync("text", $"Ticket for {Movie.Title} at {Show.Date}", 10, 10);
        await jsPdf.InvokeVoidAsync("text", $"Theater: {Ticket.TheaterName} - {Show.Type}", 10, 20);
        await jsPdf.InvokeVoidAsync("text", $"Show Time: {Ticket.ShowTime}", 10, 30);
        await jsPdf.InvokeVoidAsync("text", $"Seat: Row {Ticket.RowNumber}, Seat {Ticket.SeatNumber}", 10, 40);
        await jsPdf.InvokeVoidAsync("text", $"Ticket Type: {Ticket.TicketTypeId}", 10, 50);
        await jsPdf.InvokeVoidAsync("text", $"Price: {Ticket.TicketPrice}", 10, 60);

        await jsPdf.InvokeVoidAsync("save", "ticket.pdf");
    }
}