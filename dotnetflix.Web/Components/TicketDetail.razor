@using dotnetflix.Models.Dtos
@using dotnetflix.Models.Dtos.Movie
@using dotnetflix.Models.Dtos.Show
@inject IJSRuntime JsRuntime
@using SelectPdf
@using System.Globalization

@if (Ticket == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="card mb-4 col-xl-6 col-sm-12">
        <h5 class="card-header">@Movie.Title (@Movie.Year) - @StartTime - @EndTime</h5>
        <div class="card-body">
            <dl class="row">
                <dt class="col-xl-3 col-sm-4">Theater:</dt>
                <dd class="col-xl-9 col-sm-8">@Ticket.TheaterName - @Show.Type</dd>
                <dt class="col-xl-3 col-sm-4">Show Time:</dt>
                <dd class="col-xl-9 col-sm-8">@Ticket.ShowTime.ToString("dd-MM-yyyy - HH:mm", new CultureInfo("nl-NL"))</dd>
                <dt class="col-xl-3 col-sm-4">Seat:</dt>
                <dd class="col-xl-9 col-sm-8">Row @Ticket.RowNumber, Seat @Ticket.SeatNumber</dd>
                <dt class="col-xl-3 col-sm-4">Ticket Type:</dt>
                <dd class="col-xl-9 col-sm-8">@Ticket.TicketTypeId</dd>
                <dt class="col-xl-3 col-sm-4">Price:</dt>
                <dd class="col-xl-9 col-sm-8">@Ticket.TicketPrice.ToString(format: "C", provider: new CultureInfo("nl-NL")).Replace(".", ",")</dd>
            </dl>
            <a class="btn btn-primary" @onclick="PrintTicket">Print ticket</a>
        </div>
    </div>
}

@code {

    // Parameter to be passed to the component
    [Parameter] public TicketDto Ticket { get; set; } = new TicketDto();

    [Parameter] public MovieDto Movie { get; set; } = new MovieDto();

    // Parameter to be passed to the component
    [Parameter] public ShowDto Show { get; set; } = new ShowDto();
    [Parameter] public string StartTime { get; set; } = "00:00";
    [Parameter] public string EndTime { get; set; } = "00:00";

    protected override Task OnInitializedAsync()
    {
        // Convert date to time in 24-hour format
        StartTime = Show.Date.ToString("HH:mm");
        // Get end time by adding screen time to start time
        EndTime = Show.Date.AddMinutes(Show.ScreenTime).ToString("HH:mm");
        return Task.CompletedTask;
    }

    private async Task PrintTicket()
    {
        var jsPdf = await JsRuntime.InvokeAsync<IJSObjectReference>("eval", "new window.jsPDF()");

        await jsPdf.InvokeVoidAsync("text", $"Ticket for {Movie.Title} at {Show.Date}", 10, 10);
        await jsPdf.InvokeVoidAsync("text", $"Theater: {Ticket.TheaterName} - {Show.Type}", 10, 20);
        await jsPdf.InvokeVoidAsync("text", $"Show Time: {Ticket.ShowTime}", 10, 30);
        await jsPdf.InvokeVoidAsync("text", $"Seat: Row {Ticket.RowNumber}, Seat {Ticket.SeatNumber}", 10, 40);
        await jsPdf.InvokeVoidAsync("text", $"Ticket Type: {Ticket.TicketTypeId}", 10, 50);
        await jsPdf.InvokeVoidAsync("text", $"Price: {Ticket.TicketPrice}", 10, 60);

        await jsPdf.InvokeVoidAsync("save", "ticket.pdf");
    }

}