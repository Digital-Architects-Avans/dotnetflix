@page "/Agenda"

@inject NavigationManager NavManager
@inject IDialogService DialogService

@if (Shows == null)
{
    <h1>@Localizer["AgendaLoadingShows"]..</h1>
}
else
{
    DateTime today = DateTime.Now;
    <h1>@Localizer["AgendaTitle"]</h1>

    // Days buttons
    <div class="d-grid">
        <div class="row-cols-7">
            <FluentButton Appearance="Appearance.Lightweight" class="m-2" OnClick="@(() => GetShowByDay(today, false))">@Localizer["AgendaThisWeek"]</FluentButton>
            <FluentButton Appearance="Appearance.Lightweight" class="m-2" OnClick="@(() => GetShowByDay(today))">@Localizer["AgendaToday"]</FluentButton>
            @for (int i = 0; i < 5; i++)
            {
                DateTime day = today.AddDays(i + 1);
                <FluentButton Appearance="Appearance.Lightweight" class="m-2" OnClick="@(() => GetShowByDay(day))">@day.ToString("dd MMM")</FluentButton>
            }
        </div>
    </div>

    <FluentDataGrid Virtualize="true" ItemSize="100" Class="loading" GridTemplateColumns="1fr 1fr 6fr" Items="@(MoviesWithDates.AsQueryable())">

        @if (MoviesWithDates != null)
        {
            <PropertyColumn Style="font-size: 20px;" Title="" Property="@(s => s.MovieTitle)"></PropertyColumn>

            @* Movie info Column *@
            <TemplateColumn>
                <FluentButton IconStart="@(new Icons.Regular.Size16.Info())" Appearance="Appearance.Accent" style="width: 30px; height: 30px;" OnClick="@(() => GetMovieDetails(context.MovieId))"></FluentButton>
            </TemplateColumn>

            @* Dates Column *@
            <TemplateColumn Title="">
                @{
                    for (int i = 0; i < context.ShowIds.Count; i++)
                    {
                        int id = context.ShowIds[i];
                        <button id="@id" class="btn btn-light shadow-sm p-2 m-2" onclick="@(() => Redirect(id))">

                            <FluentIcon Value="@(new Icons.Regular.Size16.TicketDiagonal())" />
                            @context.Dates[i].ToString("H:mm")
                            <span class="text-info m-2">Theater @context.TheaterId[i]</span>
                            @if (!IsDayGrid)
                            {
                                <br />
                                <hr style="margin: 4px;" />
                                <span class="text-info m-2">@(context.Dates[i].DayOfWeek)</span>
                            }
                        </button>
                    }
                }
            </TemplateColumn>
        }
    </FluentDataGrid>
}

@code {

    [Inject]
    public IMovieService? MovieService { get; set; }
    public MovieDto? Movie { get; set; }
    [Inject] public IStringLocalizer<MyStrings> Localizer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Shows = await ShowService.GetShows();
        await GetShowByDay(DateTime.Now);
    }


    // Getting movies
    public async void GetMovieDetails(int movieId)
    {
        Movie = await MovieService.GetMovie(movieId);

        if (Movie != null)
            await OpenDialogAsync(Movie);
    }

    // Open movie details dialog
    private async Task OpenDialogAsync(MovieDto movie)
    {
        DialogParameters parameters = new()
            {
                PrimaryAction = "Close",
                PrimaryActionEnabled = true,
                SecondaryAction = null,
                Width = "540px",
                PreventScroll = true,
                ShowDismiss = false,
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<DisplayMovieInfo>(movie, parameters);
        DialogResult? result = await dialog.Result;

    }

    [Inject]
    public IShowService? ShowService { get; set; }
    public IEnumerable<ShowDto>? Shows { get; set; }
    public IQueryable<MovieWithDates>? MoviesWithDates { get; set; }
    public List<MovieWithDates> moviesWithDatesList { get; set; } = new List<MovieWithDates>();

    private bool IsDayGrid = true;
    private int ItemSize = 54;

    // Group shows by movie and dates
    protected Task GetShowByDay(DateTime date, bool isDayGrid = true)
    {
        moviesWithDatesList.Clear();

        if (Shows == null)
            Task.FromException(new ArgumentNullException());

        var groupedShows = Shows.GroupBy(s => s.MovieId);

        var count = 0;
        foreach (var group in groupedShows)
        {
            ShowDto show = group.First();
            List<ShowDto>? filteredGroup;

            if (isDayGrid)
            {
                if (date.Date == DateTime.Now.Date)
                    filteredGroup = group.Where(s => s.Date.Date == date.Date && s.Date.TimeOfDay >= date.TimeOfDay).ToList();
                else
                    filteredGroup = group.Where(s => s.Date.Date == date.Date).ToList();

                ItemSize = 54;
                IsDayGrid = true;
            }
            else
            {
                DateTime endDate = date.AddDays(7);
                filteredGroup = group.Where(d => d.Date.Date >= date.Date && d.Date.Date <= endDate.Date).ToList();
                filteredGroup.Reverse();
                ItemSize = 100;
                IsDayGrid = false;
            }

            MovieWithDates movieWithDates = new MovieWithDates
                {
                    ShowIds = filteredGroup.Select(s => s.Id).ToList(),
                    TheaterId = filteredGroup.Select(s => s.TheaterId).ToList(),
                    MovieId = show.MovieId,
                    MovieTitle = show.MovieTitle,
                    Dates = filteredGroup.Select(s => s.Date).ToList()
                };

            moviesWithDatesList.Add(movieWithDates);
            count++;
        }
        MoviesWithDates = moviesWithDatesList.AsQueryable();

        StateHasChanged();
        return Task.CompletedTask;
    }

    public void Redirect(int showId) => NavManager.NavigateTo("/tickets/" + showId);

    public class MovieWithDates
    {
        public int MovieId { get; set; }
        public List<int>? TheaterId { get; set; }
        public string? MovieTitle { get; set; }
        public List<DateTime>? Dates { get; set; }
        public List<int>? ShowIds { get; set; }
    }
}
