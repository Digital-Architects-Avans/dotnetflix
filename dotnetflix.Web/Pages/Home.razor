@page "/"

<h1>@Localizer["HomeWhatsOn"]</h1>

@if (FoundShows != null)
{
    // Show movies and times
    <p>@FoundShows timings found for @FoundMovies movies</p>

    if (FoundMovies > 0 && GroupedShowsByMovie != null)
    {
        // Loop through the grouped timings
        @foreach (var showGroup in GroupedShowsByMovie)
        {
            // Create timings list and get movie details
            var shows = showGroup.ToList();
            var movieDetails = Movies?.Where(movie => movie?.Id == shows.First().MovieId).First();

            // Show movie details and timings
            if (movieDetails != null)
            {
                var isSneakPreview = shows.First().SneakPreview;
                <MovieDetails Movie="movieDetails" IsSneakPreview="@isSneakPreview" />
            }

                        // Show timings
            <h6 class="mt-3">Today</h6>
            <div class="row pb-3">

                @foreach (var show in shows)
                {
                    <div class="col-xxl-2 col-xl-3 col-md-4 col-sm-6 pb-4 pt-2 show-time-card">
                        <ShowTime Show="show" />
                    </div>
                }

            </div>
        }
    }
}
else
{
    <p>@Localizer["HomeGatheringScreenings"]...</p>
}

@code {

    // 1) Set properties te facilitate dependency injection
    [Inject] public IShowService? ShowService { get; set; }
    [Inject] public IMovieService? MovieService { get; set; }
    [Inject] public IStringLocalizer<MyStrings> Localizer { get; set; }

    // 2) Public properties to expose to the view
    private IEnumerable<ShowDto>? Shows { get; set; }
    private IEnumerable<ShowDto>? SneakPreviewShows { get; set; }
    private IEnumerable<IGrouping<int, ShowDto>>? GroupedShowsByMovie { get; set; }
    private IEnumerable<MovieDto?> Movies { get; set; } = new List<MovieDto>();
    private int? FoundShows { get; set; }
    private int FoundMovies { get; set; }

    // 3) Method to be called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // TODO: Add error handling

        if (ShowService != null)
        {
            // TODO: Add GetShowsByDate method

            // Get shows
            var now = DateTime.Now;

            var shows = await ShowService.GetShows();

            if (shows != null)
            {
                var showArray = shows as ShowDto[] ?? shows.ToArray();

                // Filter and order shows for today
                Shows = showArray.Where(show => show.Date.Date == now.Date && show.Date.TimeOfDay >= now.TimeOfDay && show.SneakPreview != true).OrderBy(show => show.Date);

                // Filter and order sneak preview shows for today
                SneakPreviewShows = showArray.Where(show => show.Date.Date == now.Date && show.Date.TimeOfDay >= now.TimeOfDay && show.SneakPreview);

                // Calculate the number of shows and movies
                FoundShows = showArray.Count(show => show.Date.Date == now.Date && show.Date.TimeOfDay >= now.TimeOfDay);

                // Group timings by movie
                GroupedShowsByMovie = from show in Shows
                                      group show by show.MovieId
                    into showGroup
                                      orderby showGroup.First().Date
                                      select showGroup;

                // Group sneak preview timings by movie
                if (SneakPreviewShows != null)
                {
                    var sneakPreviewGroupedShows = from show in SneakPreviewShows
                                                   group show by show.MovieId
                        into showGroup
                                                   orderby showGroup.First().Date
                                                   select showGroup;

                    GroupedShowsByMovie = GroupedShowsByMovie.Concat(sneakPreviewGroupedShows);
                }

                // Get movies for grouped shows
                if (MovieService != null)
                {
                    foreach (var showGroup in GroupedShowsByMovie)
                    {
                        var movie = await MovieService.GetMovie(showGroup.First().MovieId);
                        Movies = Movies.Append(movie);
                    }

                    FoundMovies = Movies.Count();
                }
            }
        }
    }

}