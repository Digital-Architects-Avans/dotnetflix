@page "/"
@using dotnetflix.Web.Services.Contracts
@using dotnetflix.Models.Dtos.Show
@using dotnetflix.Models.Dtos.Movie
@using dotnetflix.Web.Components

<h1>What's on</h1>

@if (FoundShows != null)
{
    // Show movies and times
    <p>@FoundShows timings found for @FoundMovies movies</p>

    if (FoundMovies > 0 && GroupedShowsByMovie != null)
    {
        // Loop through the grouped timings
        @foreach (var showGroup in GroupedShowsByMovie)
        {
            // Create timings list and get movie details
            var shows = showGroup.ToList();
            var movieDetails = Movies?.Where(movie => movie.Id == shows.First().MovieId).First();

            // Show movie details and timings
            if (movieDetails != null)
            {
                <MovieDetails Movie="movieDetails"/>
            }

            <h6>Today</h6>
            <div class="row pb-3">

                @foreach (var show in shows)
                {
                    // Show timings
                    <ShowTime Show="show"/>
                }

            </div>
        }
    }
}
else
{
    <p>Gathering screenings...</p>
}

@code {

    // 1) Set properties te facilitate dependency injection
    [Inject] public IShowService? ShowService { get; set; }
    [Inject] public IMovieService? MovieService { get; set; }

    // 2) Public properties to expose to the view
    private IEnumerable<ShowDto>? Shows { get; set; }
    private IOrderedEnumerable<IGrouping<int, ShowDto>>? GroupedShowsByMovie { get; set; }
    private IEnumerable<MovieDto>? Movies { get; set; }
    private int? FoundShows { get; set; }
    private int FoundMovies { get; set; }

    // 3) Method to be called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // TODO: Add error handling

        if (ShowService != null)
        {
            // Get shows
            // TODO: Add GetShowsByDate method
            Shows = await ShowService.GetShows();

            // Filter and order shows for today
            var now = DateTime.Now;
            Shows = Shows?.Where(show => show.Date.Date == now.Date && show.Date.TimeOfDay >= now.TimeOfDay).OrderBy(show => show.Date);
            FoundShows = Shows?.Count() ?? null;

            if (Shows != null)
            {
                // Group timings by movie
                GroupedShowsByMovie = from show in Shows
                    group show by show.MovieId
                    into showGroup
                    orderby showGroup.First().Date
                    select showGroup;

                // Get movies for grouped shows
                if (MovieService != null)
                {
                    Movies ??= new List<MovieDto>();

                    foreach (var showGroup in GroupedShowsByMovie)
                    {
                        var movie = await MovieService.GetMovie(showGroup.First().MovieId);
                        Movies = Movies.Append(movie);
                    }

                    FoundMovies = Movies?.Count() ?? 0;
                }
            }
        }
    }

}