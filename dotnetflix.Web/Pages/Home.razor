@page "/"
@using dotnetflix.Web.Services.Contracts
@using dotnetflix.Models.Dtos.Show
@using dotnetflix.Models.Dtos.Movie

<h1>What's on</h1>

@if (Shows != null)
{
    // Show movies and times
    if (Shows.Count() != 0)
    {
        // Group timings by movie
        var groupedShowsByMovie = from show in Shows
            group show by show.MovieId
            into showGroup
            orderby showGroup.Key
            select showGroup;

        // Loop through the grouped timings
        @foreach (var showGroup in groupedShowsByMovie)
        {
            var shows = showGroup.ToList();

            @foreach (var show in shows)
            {
                // Convert date to time in 24-hour format
                var startTime = show.Date.ToString("HH:mm");
                var endTime = show.Date.AddMinutes(show.ScreenTime).ToString("HH:mm");

                // Show start and end times and the theater name
                <p>@startTime - @endTime</p>
                <p>@show.TheaterName</p>
            }
        }
    }
    else
    {
        <p>No screenings found.</p>
    }
}
else
{
    <p>Gathering screenings...</p>
}

@code {
    // 1) Set properties te facilitate dependency injection
    // 2) Public properties to expose to the view
    // 3) Method to be called when the component is initialized

    [Inject] public IShowService? ShowService { get; set; }
    [Inject] public IMovieService? MovieService { get; set; }

    private IEnumerable<ShowDto>? Shows { get; set; }
    private IEnumerable<MovieDto>? Movies { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ShowService != null)
        {
            // TODO: Add error handling
            // TODO: Add GetShowsByDate method

            // Get show and filter only today's timings
            Shows = await ShowService.GetShows();
            Shows = Shows?.Where(s => s.Date.Date == DateTime.Today);

            // Get movies for the available timings
            if (Shows != null && MovieService != null)
            {
                Movies ??= new List<MovieDto>();
                
                foreach (var show in Shows)
                {
                    var movie = await MovieService.GetMovie(show.MovieId);
                    Movies = Movies.Append(movie);
                }
            }
        }
        else
        {
            // Return empty list if ShowService is not available
            Shows = new List<ShowDto>();
        }
    }
}