@page "/"
@using dotnetflix.Web.Services.Contracts
@using dotnetflix.Models.Dtos.Show

<h1>Nu in de bioscoop!</h1>

@if (Shows != null)
{
    // Show movies and their showtimes when there are shows today
    if (Shows.Count() != 0)
    {
        // Group shows by movie
        var groupedShowsByMovie = from show in Shows
            group show by show.MovieId
            into showGroup
            orderby showGroup.Key
            select showGroup;

        // Loop through the grouped shows
        @foreach (var showGroup in groupedShowsByMovie)
        {
            var movie = showGroup.First().MovieTitle;
            var shows = showGroup.ToList();

            <h2>@movie</h2>

            @foreach (var show in shows)
            {
                // Convert the date to time
                var startTime = show.Date.ToString("HH:mm");
                var endTime = show.Date.AddMinutes(show.ScreenTime).ToString("HH:mm");

                // Show start and end time and the theater name
                <p>@startTime - @endTime</p>
                <p>@show.TheaterName</p>
            }
        }
    }
    else
    {
        <p>Geen films gevonden.</p>
    }
}
else
{
    <p>Voorstellingen ophalen...</p>
}

@code {
    // 1) Set properties te facilitate dependency injection
    // 2) Public properties to expose to the view
    // 3) Method to be called when the component is initialized

    [Inject] public IShowService? ShowService { get; set; }

    public IEnumerable<ShowDto>? Shows { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ShowService != null)
        {
            // TODO: Add error handling
            // TODO: Add GetShowsByDate method

            // Get shows and filter only today's shows
            Shows = await ShowService.GetShows();
            Shows = Shows?.Where(s => s.Date.Date == DateTime.Today);
        }
        else
        {
            // Return empty list if ShowService is not available
            Shows = new List<ShowDto>();
        }
    }

}