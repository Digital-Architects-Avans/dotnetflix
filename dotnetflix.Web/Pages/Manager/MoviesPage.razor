@page "/manager/movies"
@using System.Net.Http
@using System.Net.Http.Json
@using dotnetflix.Models.Dtos.Movie
@inject HttpClient Http
<h3>Manager: Movies</h3>

<NavigationHeader />

<div class="row">
    <div class="col-md-6">
       <table class="table">
                   <thead>
                       <tr>
                           <th>Movie titles</th>
                       </tr>
                   </thead>
                   <tbody>
                       @foreach (var movie in Movies)
                              {
                                  <tr @onclick="() => SelectMovie(movie)" class="@(SelectedMovie.Id == movie.Id ? "selected-movie" : "new-movie")">
                                      <td>@movie.Title</td>
                                  </tr> 
                              }
                       <tr @onclick="() => SelectMovie()" class="new-movie">
                           <td>Add New Movie</td>
                            </tr>
                   </tbody>
               </table>
    </div>
    <div class="col-md-6">
        @if (SelectedMovie.Id < 1)
        {
            <h4>Add New Movie</h4>
            <EditForm Model="SelectedMovie" OnValidSubmit="NewMovieSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="form-group">
                    <label for="title">Title</label>
                    <InputText id="title" class="form-control" @bind-Value="SelectedMovie.Title"/>
                </div>
                <div class="form-group">
                    <label for="year">Year</label>
                    <InputNumber id="year" class="form-control" @bind-Value="SelectedMovie.Year"/>
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <InputText id="description" class="form-control" @bind-Value="SelectedMovie.Description"/>
                </div>
                <div class="form-group">
                    <label for="rating">Rating</label>
                    <InputSelect id="rating" class="form-control" @bind-Value="SelectedMovie.Rating">
                        @foreach (var rating in Enum.GetValues(typeof(Rating)))
                        {
                            <option value="@rating">@rating</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="runtime">Runtime</label>
                    <InputNumber id="runtime" class="form-control" @bind-Value="SelectedMovie.Runtime"/>
                </div>
                <div class="form-group">
                    <label for="image">Image</label>
                    <InputText id="image" class="form-control" @bind-Value="SelectedMovie.Image"/>
                </div>
                <button type="submit" class="btn btn-primary">Add</button>
            </EditForm>
        }
else
{
    <h4>Update Movie</h4>
    <EditForm Model="SelectedMovie" OnValidSubmit="UpdateMovieSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="title">Title</label>
            <InputText id="title" class="form-control" @bind-Value="SelectedMovie.Title"/>
        </div>
        <div class="form-group">
            <label for="year">Year</label>
            <InputNumber id="year" class="form-control" @bind-Value="SelectedMovie.Year"/>
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" class="form-control" @bind-Value="SelectedMovie.Description"/>
        </div>
        <div class="form-group">
            <label for="rating">Rating</label>
            <InputSelect id="rating" class="form-control" @bind-Value="SelectedMovie.Rating">
                @foreach (var rating in Enum.GetValues(typeof(Rating)))
                {
                    <option value="@rating">@rating</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="runtime">Runtime</label>
            <InputNumber id="runtime" class="form-control" @bind-Value="SelectedMovie.Runtime"/>
        </div>
        <div class="form-group">
            <label for="image">Image</label>
            <InputText id="image" class="form-control" @bind-Value="SelectedMovie.Image"/>
        </div>
        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
    <button class="btn btn-danger" @onclick="DeleteMovieSubmit">Delete</button>

}
    </div>
</div>

@code {
    List<MovieDto> Movies = new List<MovieDto>();
    MovieDto SelectedMovie = new MovieDto();
    UpdateMovieDto EditMovie = new UpdateMovieDto();
    AddMovieDto NewMovie = new AddMovieDto();
    

    protected override async Task OnInitializedAsync()
    {
        Movies = await Http.GetFromJsonAsync<List<MovieDto>>("http://localhost:5247/api/movie");
        NewMovie = new AddMovieDto();
        EditMovie = new UpdateMovieDto();
        SelectMovie();
    }
    
    private void SelectMovie(MovieDto movie)
    {
        // Create a copy of the selected movie
        SelectedMovie = new MovieDto
        {
            Id = movie.Id,
            Title = movie.Title,
            Year = movie.Year,
            Description = movie.Description,
            Rating = movie.Rating,
            Runtime = movie.Runtime,
            Image = movie.Image
        };
    }
    
    private void SelectMovie()
    {
        // Create a new movie offering default values
        SelectedMovie = new MovieDto()
        {
            Id = 0,
            Title = "Barry Pooter",
            Year = 2001,
            Description = "Master piece directed by Master Movies.",
            Rating = Rating.G,
            Runtime = 4,
            Image = "ImageString"
        };
    }
    
    private async Task NewMovieSubmit()
    {
        NewMovie = new AddMovieDto()
        {
            Title = SelectedMovie.Title,
            Year = SelectedMovie.Year,
            Description = SelectedMovie.Description,
            Rating = SelectedMovie.Rating,
            Runtime = SelectedMovie.Runtime,
            Image = SelectedMovie.Image
        };
        
        var response = await Http.PostAsJsonAsync("http://localhost:5247/api/movie", NewMovie);

        if (response.IsSuccessStatusCode)
        {
            // refresh movielist from db
            Movies = await Http.GetFromJsonAsync<List<MovieDto>>("http://localhost:5247/api/movie");
            // Reset the selected movie
            SelectMovie();
            StateHasChanged();
        }
        else
        {
            // Handle error here, e.g., show an error message
        }
    }


    private async Task UpdateMovieSubmit()
    {
        EditMovie = new UpdateMovieDto()
        {
            Title = SelectedMovie.Title,
            Year = SelectedMovie.Year,
            Description = SelectedMovie.Description,
            Rating = SelectedMovie.Rating,
            Runtime = SelectedMovie.Runtime,
            Image = SelectedMovie.Image
        };
        
        var response = await Http.PutAsJsonAsync($"http://localhost:5247/api/movie/{SelectedMovie.Id}", SelectedMovie);

        if (response.IsSuccessStatusCode)
        {
            //refresh movielist from db
            Movies = await Http.GetFromJsonAsync<List<MovieDto>>("http://localhost:5247/api/movie");
            // Reset the selected movie
            SelectMovie();
            StateHasChanged();
        }
        else
        {
            // Handle error here, e.g., show an error message
        }
    }
    
    private async Task DeleteMovieSubmit()
    {
        var response = await Http.DeleteAsync($"http://localhost:5247/api/movie/{SelectedMovie.Id}");

        if (response.IsSuccessStatusCode)
        {
            //refresh movielist from db
            Movies = await Http.GetFromJsonAsync<List<MovieDto>>("http://localhost:5247/api/movie");
            // Reset the selected movie
            SelectMovie();
            StateHasChanged();
        }
        else
        {
            // Handle error here, e.g., show an error message
        }
    }
}

<style>
    .selected-movie {
            background-color: #007bff;
            color: white;
        }
</style>