@page "/manager/newsletter"
@using dotnetflix.Models.Dtos.Subscriber


<div class="d-flex justify-content-center mt-3">

    <FluentSplitter Orientation="Orientation.Horizontal" BarSize="6">

        <Panel1>
            <EditForm Model="@newsLetterForm" OnValidSubmit="@HandleValidSubmit" FormName="newsLetter">

                <h1>Write and Send a News Letter</h1>

                <FluentStack Class="mt-5" HorizontalAlignment="HorizontalAlignment.Center" Orientation="Orientation.Vertical">

                    <FluentTextField Appearance="FluentInputAppearance.Filled" Name="subject" Label="Subject" @bind-Value="newsLetterForm.Subject" Required Style="width: 600px;" />
                    <FluentTextArea Appearance="FluentInputAppearance.Filled" Name="message" Label="Message" @bind-Value="newsLetterForm.Message" Rows="28" Required Style="width: 600px;" />

                    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Send News Letter</FluentButton>
                </FluentStack>
            </EditForm>
        </Panel1>

        <Panel2>
            <FluentCard>
                <h1>Subscribers</h1>
                <FluentListbox Items="@Subscribers" OptionValue="@(i => i.Id.ToString())" >
                    <OptionTemplate>
                        <FluentIcon Icon="Icons.Regular.Size16.Person" Slot="start" />
                        @context.Email
                    </OptionTemplate>
                </FluentListbox>
            </FluentCard>
        </Panel2>

    </FluentSplitter>

</div>

@code {
    [SupplyParameterFromForm]
    private NewsLetterForm newsLetterForm { get; set; } = new();

    [Inject]
    public ISubscriberService? SubscriberService { get; set; }
    public IEnumerable<SubscriberDto>? Subscribers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SubscriberService != null)
            Subscribers = await SubscriberService.GetSubscribers();
    }

    private void HandleValidSubmit()
    {

    }

    public class NewsLetterForm
    {
        [Required]
        public string? Subject { get; set; }
        [Required]
        public string? Message { get; set; }
    }
}
