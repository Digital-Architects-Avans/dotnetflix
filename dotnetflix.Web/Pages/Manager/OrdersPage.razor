@page "/manager/orders"
@using dotnetflix.Models.Dtos.Order
@inject HttpClient Http

<h3>@Localizer["OrdersPageManagerOrders"]</h3>
<NavigationHeader />    

<div class="row">
    <div class="col-md-6">
        <table class="table">
            <thead>
                <tr>
                    <th>Order details</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var order in Orders)
            {
                <tr @onclick="() => SelectOrder(order)" class="@(SelectedOrder.Id == order.Id ? "selected-order" : "new-order")">
                    <td>@order.Id, @order.TotalPrice, @order.Uuid, @order.CustomerName, @order.CustomerEmail</td>
                </tr>
            }
            <tr @onclick="() => SelectOrder()" class="new-order">
                <td>Add New Order</td>
            </tr>
            </tbody>
        </table>
    </div>
    <div class="col-md-6">
        @if (SelectedOrder.Id < 1)
        {
            <h4>Add New Order</h4>
            <EditForm Model="SelectedOrder" OnValidSubmit="NewOrderSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="form-group">
                    <label for="totalPrice">Total Price</label>
                    <InputNumber id="totalPrice" class="form-control" @bind-Value="SelectedOrder.TotalPrice" />
                </div>

                <div class="form-group">
                    <label for="uuid">UUID</label>
                    <InputText id="uuid" class="form-control" @bind-Value="SelectedOrder.Uuid" />
                </div>

                <div class="form-group">
                    <label for="customerName">Customer Name</label>
                    <InputText id="customerName" class="form-control" @bind-Value="SelectedOrder.CustomerName" />
                </div>

                <div class="form-group">
                    <label for="customerEmail">Customer Email</label>
                    <InputText id="customerEmail" class="form-control" @bind-Value="SelectedOrder.CustomerEmail" />
                </div>

                <button type="submit" class="btn btn-primary">Add</button>
            </EditForm>
        }
        else
        {
            <h4>Update Order</h4>
            <EditForm Model="SelectedOrder" OnValidSubmit="UpdateOrderSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="form-group">
                    <label for="totalPrice">Total Price</label>
                    <InputNumber id="totalPrice" class="form-control" @bind-Value="SelectedOrder.TotalPrice" />
                </div>

                <div class="form-group">
                    <label for="uuid">UUID</label>
                    <InputText id="uuid" class="form-control" @bind-Value="SelectedOrder.Uuid" />
                </div>

                <div class="form-group">
                    <label for="customerName">Customer Name</label>
                    <InputText id="customerName" class="form-control" @bind-Value="SelectedOrder.CustomerName" />
                </div>

                <div class="form-group">
                    <label for="customerEmail">Customer Email</label>
                    <InputText id="customerEmail" class="form-control" @bind-Value="SelectedOrder.CustomerEmail" />
                </div>

                <button type="submit" class="btn btn-primary">Update</button>
            </EditForm>
            <button class="btn btn-danger" @onclick="DeleteOrderSubmit">Delete</button>
        }
    </div>
</div>

@code {
    [Inject] public IStringLocalizer<MyStrings> Localizer { get; set; }

    List<OrderDto> Orders = new List<OrderDto>();
    OrderDto SelectedOrder = new OrderDto();
    UpdateOrderDto EditOrder = new UpdateOrderDto();
    AddOrderDto NewOrder = new AddOrderDto();



    protected override async Task OnInitializedAsync()
    {
        Orders = await Http.GetFromJsonAsync<List<OrderDto>>("api/order");
        SelectOrder();
    }

    private void SelectOrder(OrderDto order)
    {
        // Create a copy of the selected order
        SelectedOrder = new OrderDto
        {
            Id = order.Id,
            TotalPrice = order.TotalPrice,
            Uuid = order.Uuid,
            CustomerName = order.CustomerName,
            CustomerEmail = order.CustomerEmail
        };
    }

    private void SelectOrder()
    {
        SelectedOrder = new OrderDto
        {
            Id = 0,
            CustomerName = string.Empty,
            CustomerEmail = string.Empty
        };
    }

    private async Task NewOrderSubmit()
    {
        NewOrder = new AddOrderDto
        {
            Uuid = SelectedOrder.Uuid,
            CustomerName = SelectedOrder.CustomerName,
            CustomerEmail = SelectedOrder.CustomerEmail
        };

        var response = await Http.PostAsJsonAsync("api/order", NewOrder);

        if (response.IsSuccessStatusCode)
        {
            Orders = await Http.GetFromJsonAsync<List<OrderDto>>("api/order");
            SelectOrder();
            StateHasChanged();
        }
    }

    private async Task UpdateOrderSubmit()
    {
        EditOrder = new UpdateOrderDto
        {
            TotalPrice = SelectedOrder.TotalPrice,
            Uuid = SelectedOrder.Uuid,
            CustomerName = SelectedOrder.CustomerName,
            CustomerEmail = SelectedOrder.CustomerEmail
        };

        var response = await Http.PutAsJsonAsync($"api/order/{SelectedOrder.Id}", EditOrder);

        if (response.IsSuccessStatusCode)
        {
            Orders = await Http.GetFromJsonAsync<List<OrderDto>>("api/order");
            SelectOrder();
            StateHasChanged();
        }
    }

    private async Task DeleteOrderSubmit()
    {
        var response = await Http.DeleteAsync($"api/order/{SelectedOrder.Id}");

        if (response.IsSuccessStatusCode)
        {
            Orders = await Http.GetFromJsonAsync<List<OrderDto>>("api/order");
            SelectOrder();
            StateHasChanged();
        }
    }
}