@page "/manager/shows"
@using dotnetflix.Models.Dtos.Theater
@inject HttpClient Http
<h3>Manager: Shows</h3>

<NavigationHeader/>

<div class="row">
    <div class="col-md-6">
        <table class="table">
            <thead>
            <tr>
                <th>Show details</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var show in _shows)
            {
                <tr @onclick="() => SelectShow(show)" class="@(_selectedShow.Id == show.Id ? "selected-show" : "new-show")">
                    <td>@show.Id, @show.MovieTitle, @show.TheaterName, @show.Date</td>
                </tr>
            }
            <tr @onclick="() => SelectShow()" class="new-show">
                <td>Add New Show</td>
            </tr>
            </tbody>
        </table>
    </div>
    <div class="col-md-6">
        @if (_selectedShow.Id < 1)
        {
            <h4>Add New Show</h4>
            <EditForm Model="_selectedShow" OnValidSubmit="NewShowSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="form-group">
                    <label for="movieTitle">Movie Title</label>
                    <InputSelect id="movieTitle" class="form-control" @bind-Value="_selectedShow.MovieTitle">
                        @foreach (var movie in _movies)
                        {
                            <option value="@movie.Title">@movie.Title</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="theaterName">Theater Name</label>
                    <InputSelect id="theaterName" class="form-control" @bind-Value="_selectedShow.TheaterName">
                        @foreach (var theater in _theaters)
                        {
                            <option value="@theater.Name">@theater.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="screenTime">Screen Time</label>
                    <InputNumber id="screenTime" class="form-control" @bind-Value="_selectedShow.ScreenTime"/>
                </div>
                <div class="form-group">
                    <label for="type">Type</label>
                    <InputSelect id="type" class="form-control" @bind-Value="_selectedShow.Type">
                        <option value="Regular">Regular</option>
                        <option value="ThreeD">3D</option>
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="showDate">Show Date</label>
                    <InputDate id="showDate" class="form-control" @bind-Value="_selectedShow.Date"/>
                </div>


                <div class="form-group time-inputs">
                    <label for="showTime">Show Time</label>
                    <div class="time-fields" id="showTime">
                        <InputNumber id="timeHour" step="1" max="23" min="8" class="form-control time-field" @bind-Value="@_timeHour"></InputNumber> hours
                        <InputNumber id="timeMinute" step="1" max="55" min="0" class="form-control time-field" @bind-Value="@_timeMinute"></InputNumber> minutes
                    </div>
                </div>

                <div class="form-group">
                    <label for="sneakPreview">Sneak preview</label>
                    <InputCheckbox id="sneakPreview" @bind-Value=_selectedShow.SneakPreview></InputCheckbox>
                </div>

                <div class="form-group">
                    <label for="basePrice">Base Price</label>
                    <InputNumber id="basePrice" class="form-control" @bind-Value="_selectedShow.BasePrice" step="0.10"/>
                </div>
                <button type="submit" class="btn btn-primary">Add</button>
            </EditForm>
        }
        else
        {
            <h4>Update Show</h4>
            <EditForm Model="_selectedShow" OnValidSubmit="UpdateShowSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="form-group">
                    <label for="movieTitle">Movie Title</label>
                    <InputSelect id="movieTitle" class="form-control" @bind-Value="_selectedShow.MovieTitle">
                        @foreach (var movie in _movies)
                        {
                            <option value="@movie.Title">@movie.Title</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="theaterName">Theater Name</label>
                    <InputSelect id="theaterName" class="form-control" @bind-Value="_selectedShow.TheaterName">
                        @foreach (var theater in _theaters)
                        {
                            <option value="@theater.Name">@theater.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="screenTime">Screen Time</label>
                    <InputNumber id="screenTime" class="form-control" @bind-Value="_selectedShow.ScreenTime"/>
                </div>
                <div class="form-group">
                    <label for="type">Type</label>
                    <InputSelect id="type" class="form-control" @bind-Value="_selectedShow.Type">
                        <option value="Regular">Regular</option>
                        <option value="ThreeD">3D</option>
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="showDate">Show Date</label>
                    <InputDate id="showDate" class="form-control" @bind-Value="_selectedShow.Date"/>
                </div>

                <div class="form-group time-inputs">
                    <label for="showTime">Show Time</label>
                    <div class="time-fields">
                        <InputNumber id="timeHour" step="1" max="23" min="8" class="form-control time-field" @bind-Value="@_timeHour"></InputNumber> hours :
                        <InputNumber id="timeMinute" step="1" max="55" min="0" class="form-control time-field" @bind-Value="@_timeMinute"></InputNumber> minutes
                    </div>
                </div>

                <div class="form-group">
                    <label for="sneakPreview">Sneak preview</label>
                    <InputCheckbox id="sneakPreview" @bind-Value=_selectedShow.SneakPreview></InputCheckbox>
                </div>

                <div class="form-group">
                    <label for="basePrice">Base Price</label>
                    <InputNumber id="basePrice" class="form-control" @bind-Value="_selectedShow.BasePrice"/>
                </div>
                <button type="submit" class="btn btn-primary">Update</button>
            </EditForm>
            <button class="btn btn-danger" @onclick="DeleteShowSubmit">Delete</button>
        }
    </div>
</div>

@code {
    List<ShowDto> _shows = new List<ShowDto>();
    List<MovieDto> _movies = new List<MovieDto>();
    List<TheaterDto> _theaters = new List<TheaterDto>();
    ShowDto _selectedShow = new ShowDto();
    UpdateShowDto _editShow = new UpdateShowDto();
    AddShowDto _newShow = new AddShowDto();
    TimeSpan SelectedTime { get; set; } = DateTime.Now.TimeOfDay;
    int _timeHour;
    int _timeMinute;

    protected override async Task OnInitializedAsync()
    {
        _shows = await Http.GetFromJsonAsync<List<ShowDto>>("api/show");
        _movies = await Http.GetFromJsonAsync<List<MovieDto>>("api/movie");
        _theaters = await Http.GetFromJsonAsync<List<TheaterDto>>("api/theater");
        _newShow = new AddShowDto();
        _editShow = new UpdateShowDto();
        SelectShow();
    }

    private void SelectShow(ShowDto show)
    {
        // Create a copy of the selected show
        _selectedShow = new ShowDto
        {
            Id = show.Id,
            MovieId = show.MovieId,
            MovieTitle = show.MovieTitle,
            TheaterId = show.TheaterId,
            TheaterName = show.TheaterName,
            Date = show.Date,
            BasePrice = show.BasePrice,
            ScreenTime = show.ScreenTime,
            Type = show.Type,
            SneakPreview = show.SneakPreview
        };
        SelectedTime = _selectedShow.Date.TimeOfDay;
        _timeHour = _selectedShow.Date.Hour;
        _timeMinute = _selectedShow.Date.Minute;
    }

    private void SelectShow()
    {
        _selectedShow = new ShowDto
        {
            Id = 0,
            MovieId = 0,
            MovieTitle = "",
            TheaterId = 0,
            TheaterName = "",
            Date = DateTime.Now,
            BasePrice = 12,
            ScreenTime = 120,
            Type = MovieType.Regular,
            SneakPreview = false
        };
        SelectedTime = _selectedShow.Date.TimeOfDay;
        _timeHour = 0;
        _timeMinute = 0;
    }

    private async Task NewShowSubmit()
    {
        //set the movie and theater id from the selected movie title and theater name
        var selectedMovie = _movies.FirstOrDefault(m => m.Title == _selectedShow.MovieTitle);
        var selectedTheater = _theaters.FirstOrDefault(t => t.Name == _selectedShow.TheaterName);
        _selectedShow.MovieId = selectedMovie.Id;
        _selectedShow.TheaterId = selectedTheater.Id;

        if (_selectedShow.MovieId > 0 && _selectedShow.TheaterId > 0)
        {
            SelectedTime = new TimeSpan(_timeHour, _timeMinute, 0);
            _newShow = new AddShowDto
            {
                MovieId = _selectedShow.MovieId,
                TheaterId = _selectedShow.TheaterId,
                Date = _selectedShow.Date.Date + SelectedTime,
                BasePrice = _selectedShow.BasePrice,
                ScreenTime = _selectedShow.ScreenTime,
                Type = _selectedShow.Type,
                SneakPreview = _selectedShow.SneakPreview
            };
        }
        else
        {
            // Handle error here, e.g., show an error message
            return;
        }

        // get all shows in the same theater
        var theaterShows = _shows.Where(s => s.TheaterId == _newShow.TheaterId).ToList();

        // Check if there are time conflicts
        foreach (var show in theaterShows)
        {
            var showEndTime = show.Date.AddMinutes(show.ScreenTime);
            if (_newShow.Date >= show.Date && _newShow.Date < showEndTime)
            {
                throw new InvalidOperationException("The show times overlap with another show.");
            }

            if (_newShow.Date.AddMinutes(_newShow.ScreenTime) > show.Date && _newShow.Date.AddMinutes(_newShow.ScreenTime) <= showEndTime)
            {
                throw new InvalidOperationException("The show times overlap with another show.");
            }
        }

        var response = await Http.PostAsJsonAsync("api/show", _newShow);

        if (response.IsSuccessStatusCode)
        {
            // refresh movielist from db
            _shows = await Http.GetFromJsonAsync<List<ShowDto>>("api/show");
            // Reset the selected movie
            SelectShow();
            StateHasChanged();
        }
        else
        {
            // Handle error here, e.g., show an error message
        }
    }


    private async Task UpdateShowSubmit()
    {
        //set the movie and theater id from the selected movie title and theater name
        var selectedMovie = _movies.FirstOrDefault(m => m.Title == _selectedShow.MovieTitle);
        var selectedTheater = _theaters.FirstOrDefault(t => t.Name == _selectedShow.TheaterName);
        _selectedShow.MovieId = selectedMovie.Id;
        _selectedShow.TheaterId = selectedTheater.Id;

        if (_selectedShow.MovieId > 0 && _selectedShow.TheaterId > 0)
        {
            SelectedTime = new TimeSpan(_timeHour, _timeMinute, 0);
            _editShow = new UpdateShowDto
            {
                MovieId = _selectedShow.MovieId,
                TheaterId = _selectedShow.TheaterId,
                Date = _selectedShow.Date.Date + SelectedTime,
                BasePrice = _selectedShow.BasePrice,
                ScreenTime = _selectedShow.ScreenTime,
                Type = _selectedShow.Type,
                SneakPreview = _selectedShow.SneakPreview
            };
        }
        else
        {
            // Handle error here, e.g., show an error message
            return;
        }

        // get all shows in the same theater
        var theaterShows = _shows.Where(s => s.TheaterId == _editShow.TheaterId).ToList();

        // Check if there are time conflicts
        foreach (var show in theaterShows)
        {
            // If the show is the same as the one we're updating, skip this iteration
            if (show.Id == _selectedShow.Id)
            {
                continue;
            }

            var showEndTime = show.Date.AddMinutes(show.ScreenTime);
            if (_editShow.Date > show.Date && _editShow.Date < showEndTime)
            {
                throw new InvalidOperationException("The show times overlap with another show.");
            }

            if (_editShow.Date.AddMinutes(_editShow.ScreenTime) > show.Date && _editShow.Date.AddMinutes(_editShow.ScreenTime) <= showEndTime)
            {
                throw new InvalidOperationException("The show times overlap with another show.");
            }
        }

        var response = await Http.PutAsJsonAsync($"api/show/{_selectedShow.Id}", _editShow);

        if (response.IsSuccessStatusCode)
        {
            // refresh movielist from db
            _shows = await Http.GetFromJsonAsync<List<ShowDto>>("api/show");
            // Reset the selected movie
            SelectShow();
            StateHasChanged();
        }
        else
        {
            // Handle error here, e.g., show an error message
        }
    }


    private async Task DeleteShowSubmit()
    {
        var response = await Http.DeleteAsync($"api/show/{_selectedShow.Id}");

        if (response.IsSuccessStatusCode)
        {
            // refresh movielist from db
            _shows = await Http.GetFromJsonAsync<List<ShowDto>>("api/show");
            // Reset the selected movie
            SelectShow();
            StateHasChanged();
        }
        else
        {
            // Handle error here, e.g., show an error message
        }
    }

}