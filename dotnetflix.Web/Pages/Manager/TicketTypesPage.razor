@page "/manager/tickettypes"
@using dotnetflix.Models.Dtos.TicketType
@inject HttpClient Http

<h3>Ticket Type / Discounts</h3>

<NavigationHeader />

<div class="row">
    <div class="col-md-6">
        <table class="table">
            <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Discount</th>
            </tr>
            </thead>
            <tbody>
            <tr @onclick="() => SelectTicketType()" class="new-ticket-type">
                <td>Add</td>
                <td>New</td>
                <td>Type</td>
            </tr>
            @foreach (var type in TicketTypes)
            {
                <tr @onclick="() => SelectTicketType(type)" class="@(SelectedTicketType != null && SelectedTicketType.Id == type.Id ? "selected-discount" : "")">
                    <td>@type.Id</td>
                    <td>@type.Name</td>
                    <td>@type.Discount</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="col-md-6">
        @if (SelectedTicketType.Id < 1)
        {
            <h4>Add New Ticket Type</h4>
            <EditForm Model="SelectedTicketType" OnValidSubmit="NewTicketTypeSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="form-group">
                    <label for="name">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="SelectedTicketType.Name"/>
                </div>
                <div class="form-group">
                    <label for="discount">Discount</label>
                    <InputNumber id="discount" class="form-control" @bind-Value="SelectedTicketType.Discount"/>
                </div>
                <button type="submit" class="btn btn-primary">Add</button>
            </EditForm>
        }
        else
        {
            <h4>Update Ticket Type</h4>
            <EditForm Model="SelectedTicketType" OnValidSubmit="UpdateTicketTypeSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="form-group">
                    <label for="name">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="SelectedTicketType.Name"/>
                </div>
                <div class="form-group">
                    <label for="discount">Discount</label>
                    <InputNumber id="discount" class="form-control" @bind-Value="SelectedTicketType.Discount"/>
                </div>
                <button type="submit" class="btn btn-primary">Update</button>
            </EditForm>
            <button class="btn btn-danger" @onclick="DeleteTicketTypeSubmit">Delete</button>
        }
    </div>
</div>

@code {
    List<TicketTypeDto> TicketTypes = new List<TicketTypeDto>();
    TicketTypeDto SelectedTicketType = new TicketTypeDto();
    UpdateTicketTypeDto EditTicketType = new UpdateTicketTypeDto();
    AddTicketTypeDto newTicketType = new AddTicketTypeDto();

    protected override async Task OnInitializedAsync()
    {
        TicketTypes = await Http.GetFromJsonAsync<List<TicketTypeDto>>("api/tickettype");
        SelectTicketType();
    }

    private void SelectTicketType(TicketTypeDto type)
    {
        if (SelectedTicketType != null && SelectedTicketType.Id == type.Id)
        {
            SelectedTicketType = null;
        }
        else
        {
            SelectedTicketType = new TicketTypeDto
            {
                Id = type.Id,
                Name = type.Name,
                Discount = type.Discount
            };
        }
    }

    private void SelectTicketType()
    {
        SelectedTicketType = new TicketTypeDto
        {
            Id = 0,
            Name = "",
            Discount = 0
        };
    }

    private async Task NewTicketTypeSubmit()
    {
        newTicketType = new AddTicketTypeDto
        {
            Name = SelectedTicketType.Name,
            Discount = SelectedTicketType.Discount
        };
        
        var response = await Http.PostAsJsonAsync("api/tickettype", newTicketType);

        if (response.IsSuccessStatusCode)
        {
            TicketTypes = await Http.GetFromJsonAsync<List<TicketTypeDto>>("api/tickettype");
            SelectTicketType();
            StateHasChanged();
        }
    }

    private async Task UpdateTicketTypeSubmit()
    {
        EditTicketType = new UpdateTicketTypeDto
        {
            Name = SelectedTicketType.Name,
            Discount = SelectedTicketType.Discount
        };

        var response = await Http.PutAsJsonAsync($"api/tickettype/{SelectedTicketType.Id}", EditTicketType);

        if (response.IsSuccessStatusCode)
        {
            TicketTypes = await Http.GetFromJsonAsync<List<TicketTypeDto>>("api/tickettype");
            SelectTicketType();
            StateHasChanged();
        }
    }

    private async Task DeleteTicketTypeSubmit()
    {
        var response = await Http.DeleteAsync($"api/tickettype/{SelectedTicketType.Id}");

        if (response.IsSuccessStatusCode)
        {
            TicketTypes = await Http.GetFromJsonAsync<List<TicketTypeDto>>("api/tickettype");
            SelectTicketType();
            StateHasChanged();
        }
    }
}