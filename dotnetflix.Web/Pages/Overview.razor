@page "/overview"
@page "/overview/{OrderCode:int}"
@using dotnetflix.Models.Dtos.Order

@using dotnetflix.Models.Dtos

@inject NavigationManager NavigationManager

<h1>Collect your tickets</h1>

@switch (Status)
{
    case PageState.Loading:

        <p>Loading...</p>

        break;
    case PageState.CodeFound:

        <p>Getting your tickets... <a href="/overview" @onclick="ResetPage">Try again</a></p>

        break;
    case PageState.EnterCode:

        // Show form to enter order code
        <FluentStack Orientation="Orientation.Vertical">
            <FluentTextField
                @bind-Value=_orderCode
                Minlength="6" Maxlength="6"
                Label="Enter your unique order code:"
                Style="width: 140px;"/>
            <FluentButton IconStart="@(new Icons.Regular.Size20.TicketDiagonal())"
                          Appearance="Appearance.Accent"
                          OnClick="@CollectTicketsClicked">
                Collect tickets
            </FluentButton>
        </FluentStack>

        break;
    case PageState.OrderFound:
        
        <FluentCard MinimalStyle="true" Width="230px" Style="margin-top: 24px; margin-bottom: 24px">
            <FluentLabel Typo="Typography.HeroTitle">@Order.Uuid.ToUpper()</FluentLabel>
            <p>Please use this code to collect your tickets in the cinema.</p>
        </FluentCard>

        <MovieDetails Movie="Movie" IsSneakPreview="@_isSneakPreview"/>

        <p>Tickets for order #@OrderCode:</p>
        @foreach (var ticket in Tickets)
        {
            <TicketDetail Ticket="ticket" Movie="Movie" Show="Show"/>
        }
        
        <Maps></Maps>

        break;
    case PageState.OrderNotFound:

        <p>No order found with #@OrderCode. <a href="/overview" @onclick="ResetPage">Try again</a></p>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}

@code {

    // 1) Set properties te facilitate dependency injection
    [Inject] public IOrderService? OrderService { get; set; }
    [Inject] public ITicketService? TicketService { get; set; }
    [Inject] public IShowService? ShowService { get; set; }
    [Inject] public IMovieService? MovieService { get; set; }

    // 2) Public properties to expose to the view
    private OrderDto Order { get; set; } = new OrderDto();
    private List<TicketDto> Tickets { get; set; } = new List<TicketDto>();
    private ShowDto? Show { get; set; } = new ShowDto();
    private MovieDto? Movie { get; set; } = new MovieDto();

    private PageState Status { get; set; }
    [Parameter] public int OrderCode { get; set; }
    private string _orderCode = "";
    private bool _isSneakPreview;

    private enum PageState
    {
        Loading,
        CodeFound,
        EnterCode,
        OrderFound,
        OrderNotFound
    }

    // 3) Method to be called when the component is initialized
    protected override Task OnInitializedAsync()
    {
        Status = PageState.Loading;
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (OrderCode != 0)
        {
            Status = PageState.CodeFound;

            // 1) Get order details
            if (OrderService != null)
            {
                Order = await OrderService.GetOrder(OrderCode);

                // ReSharper disable once ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
                if (Order == null)
                {
                    Status = PageState.OrderNotFound;
                    return;
                }
            }

            // Get tickets details
            if (TicketService != null)
            {
                var tickets = await TicketService.GetTickets();
                if (tickets != null) Tickets = tickets.Where(ticketDto => Order.TicketIds.Contains(ticketDto.Id)).ToList();
            }

            // Get show details
            if (ShowService != null)
            {
                Show = await ShowService.GetShow(Tickets[0].ShowId);
            }

            if (Show != null)
            {
                // Check if the show is a sneak preview
                _isSneakPreview = Show.SneakPreview;

                // Get movie details 
                if (MovieService != null)
                {
                    Movie = await MovieService.GetMovie(Show.MovieId);
                }

                Status = PageState.OrderFound;
            }
        }
        else
        {
            Status = PageState.EnterCode;
        }
    }

    // 4) Methods UI events
    private async void CollectTicketsClicked()
    {
        if (OrderService != null)
        {
            var order = await OrderService.GetOrderByUuid(_orderCode);
            if (order != null)
            {
                NavigationManager.NavigateTo($"/overview/{order.Id}");
            }
            else
            {
                NavigationManager.NavigateTo($"/overview/10");
            }
        }
    }

    private void ResetPage()
    {
        _orderCode = "";
        NavigationManager.NavigateTo("/overview");
    }

}