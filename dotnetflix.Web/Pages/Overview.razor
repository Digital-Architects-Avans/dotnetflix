@page "/overview"
@page "/overview/{OrderCode:int}"

@using QRCoder
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using SixLabors.ImageSharp.PixelFormats

@using dotnetflix.Models.Dtos.Order

@using dotnetflix.Models.Dtos

@inject NavigationManager NavigationManager

<h1>@Localizer["OverviewCollectTickets"]</h1>

@switch (Status)
{
    case PageState.Loading:

        <p>@Localizer["OverviewLoading"]...</p>

        break;
    case PageState.CodeFound:

        <p>@Localizer["OverviewGettingTickets"]... <a href="/overview" @onclick="ResetPage">Try again</a></p>

        break;
    case PageState.EnterCode:

        // Show form to enter order code
        <FluentStack Orientation="Orientation.Vertical">
            <FluentTextField
                @bind-Value=_orderCode
                Minlength="6" Maxlength="6"
                Label=@Localizer["OverviewEnterCode"]
                Style="width: 140px;"/>
            <FluentButton IconStart="@(new Icons.Regular.Size20.TicketDiagonal())"
                          Appearance="Appearance.Accent"
                          OnClick="@CollectTicketsClicked">
                @Localizer["OverviewCollectTicketsButton"]
            </FluentButton>
        </FluentStack>

        break;
    case PageState.OrderFound:

        <FluentCard MinimalStyle="true" Width="230px" Style="margin-top: 24px; margin-bottom: 24px">
            @if (!string.IsNullOrEmpty(QRCodeBase64))
            {
                <img src="@QRCodeBase64" alt="QR Code" height="148px" width="148px"/>
            }
            <FluentDivider Style="margin: 20px 0;"></FluentDivider>
            <FluentLabel Typo="Typography.HeroTitle">@Order.Uuid.ToUpper()</FluentLabel>
            <p>@Localizer["OverviewUseThisCode"]</p>
        </FluentCard>

        <MovieDetails Movie="Movie" IsSneakPreview="@_isSneakPreview"/>

        <p style="margin-top: 24px">@Localizer["OverviewTicketsForOrder", OrderCode]:</p>
        @foreach (var ticket in Tickets)
        {
            <TicketDetail Ticket="ticket" Movie="Movie" Show="Show"/>
        }

        <Maps></Maps>

        break;
    case PageState.OrderNotFound:

        <p>@Localizer["OverviewNoOrderFound", OrderCode] <a href="/overview" @onclick="ResetPage">@Localizer["OverviewTryAgain"]</a></p>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}

@code {

    // 1) Set properties te facilitate dependency injection
    [Inject] public IOrderService? OrderService { get; set; }
    [Inject] public ITicketService? TicketService { get; set; }
    [Inject] public IShowService? ShowService { get; set; }
    [Inject] public IMovieService? MovieService { get; set; }
    [Inject] public IStringLocalizer<MyStrings> Localizer { get; set; }

    // 2) Public properties to expose to the view
    private OrderDto Order { get; set; } = new OrderDto();
    private List<TicketDto> Tickets { get; set; } = new List<TicketDto>();
    private ShowDto? Show { get; set; } = new ShowDto();
    private MovieDto? Movie { get; set; } = new MovieDto();

    private PageState Status { get; set; }
    [Parameter] public int OrderCode { get; set; }
    private string _orderCode = "";
    private bool _isSneakPreview;

    private enum PageState
    {
        Loading,
        CodeFound,
        EnterCode,
        OrderFound,
        OrderNotFound
    }

    // 3) Method to be called when the component is initialized
    protected override Task OnInitializedAsync()
    {
        Status = PageState.Loading;
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (OrderCode != 0)
        {
            Status = PageState.CodeFound;

            // 1) Get order details
            if (OrderService != null)
            {
                Order = await OrderService.GetOrder(OrderCode);

                // ReSharper disable once ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
                if (Order == null)
                {
                    Status = PageState.OrderNotFound;
                    return;
                }
            }

            // Get tickets details
            if (TicketService != null)
            {
                var tickets = await TicketService.GetTicketsForOrder(Order.Id);
                Tickets = tickets.ToList();
            }

            // Get show details
            if (ShowService != null)
            {
                Show = await ShowService.GetShow(Tickets[0].ShowId);
            }

            if (Show != null)
            {
                // Check if the show is a sneak preview
                _isSneakPreview = Show.SneakPreview;

                // Get movie details 
                if (MovieService != null)
                {
                    Movie = await MovieService.GetMovie(Show.MovieId);
                }

                // Generate QR code
                GenerateQRCode(Order.Uuid.ToUpper(), moduleSize:8);

                Status = PageState.OrderFound;
            }
        }
        else
        {
            Status = PageState.EnterCode;
        }
    }

    // 4) Methods UI events
    private async void CollectTicketsClicked()
    {
        if (OrderService != null)
        {
            var order = await OrderService.GetOrderByUuid(_orderCode);
            if (order != null)
            {
                NavigationManager.NavigateTo($"/overview/{order.Id}");
            }
            else
            {
                NavigationManager.NavigateTo($"/overview/10");
            }
        }
    }

    private void ResetPage()
    {
        _orderCode = "";
        NavigationManager.NavigateTo("/overview");
    }

    // QR Code Handling
    private string QRCodeBase64 { get; set; }

    private void GenerateQRCode(string text, int moduleSize)
    {
        // Create QR code data
        QRCodeGenerator qrGenerator = new QRCodeGenerator();
        QRCodeData qrCodeData = qrGenerator.CreateQrCode(text, QRCodeGenerator.ECCLevel.Q);

        // Calculate QR code image dimensions with increased resolution
        int width = qrCodeData.ModuleMatrix.Count * moduleSize;
        int height = qrCodeData.ModuleMatrix.Count * moduleSize;

        // Render QR code using ImageSharp
        var qrCodeImage = new Image<Rgba32>(width, height);

        // Iterate through each module (pixel) in the QR code data and set corresponding pixels in the ImageSharp image
        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                // Calculate the module index in the QR code data based on the coordinates in the ImageSharp image
                int moduleX = x / moduleSize;
                int moduleY = y / moduleSize;

                // Set black pixel for modules with data and white pixel for empty modules
                qrCodeImage[x, y] = qrCodeData.ModuleMatrix[moduleY][moduleX] ? new Rgba32(0, 0, 0) : new Rgba32(255, 255, 255);
            }
        }

        // Convert the ImageSharp image to a base64-encoded string
        using var memoryStream = new MemoryStream();
        qrCodeImage.SaveAsPng(memoryStream);
        QRCodeBase64 = $"data:image/png;base64,{Convert.ToBase64String(memoryStream.ToArray())}";
    }

}