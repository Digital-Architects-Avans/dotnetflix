@page "/overview"
@page "/overview/{OrderCode}"
@using dotnetflix.Web.Services.Contracts
@using dotnetflix.Models.Dtos.Movie
@using dotnetflix.Models.Dtos.Show
@using dotnetflix.Web.Components

@inject NavigationManager NavigationManager

<h1>Collect your tickets</h1>

@switch (Status)
{
    case PageState.Loading:

        <p>Loading...</p>

        break;
    case PageState.CodeFound:

        <p>Getting your tickets... <a href="/overview" @onclick="ResetPage">Try again</a></p>

        break;
    case PageState.EnterCode:

        // Show form to enter order code
        <label for="orderCode" class="form-label">Your order number</label>
        <input @onkeydown="CollectTicketsClicked"
               @bind="_orderCode"
               id="orderCode"
               type="number"
               class="form-control"
               placeholder="123456"
               style="max-width: 128px"/>
        <button type="button" class="btn btn-primary mt-2" @onclick="CollectTicketsClicked">Collect tickets</button>

        break;
    case PageState.OrderFound:

        <p>Tickets for order #@OrderCode.</p>
        
        <MovieDetails Movie="Movie"/>
        <ShowTime Show="Show" />

        break;
    case PageState.OrderNotFound:

        <p>No order found with #@OrderCode. <a href="/overview" @onclick="ResetPage">Try again</a></p>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}

@code {

    // 1) Set properties te facilitate dependency injection
    // [Inject] public IOrderService? OrderService { get; set; }
    // [Inject] public ITicketService? TicketService { get; set; }
    [Inject] public IShowService? ShowService { get; set; }
    [Inject] public IMovieService? MovieService { get; set; }

    // 2) Public properties to expose to the view
    // private OrderDto Order { get; set; } = new OrderDto();
    // private List<TicketDto> Tickets { get; set; } = new List<TicketDto>();
    private ShowDto Show { get; set; } = new ShowDto();
    private MovieDto Movie { get; set; } = new MovieDto();
    
    private PageState Status { get; set; }
    [Parameter] public string? OrderCode { get; set; }
    private string _orderCode = "";

    private enum PageState
    {
        Loading,
        CodeFound,
        EnterCode,
        OrderFound,
        OrderNotFound
    }

    // 3) Method to be called when the component is initialized
    protected override Task OnInitializedAsync()
    {
        Status = PageState.Loading;
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        if (OrderCode != null)
        {
            Status = PageState.CodeFound;
            
            // 1) Get order details from the API with OrderCode
            // Order = OrderService.GetOrder(OrderCode);
            
            // Optional: Get tickets details from the API with OrderId
            // Tickets = TicketService.GetTickets(OrderId);
            
            // 2) Get show details from the API with ShowId
            // Show = await ShowService.GetShow(ShowId);
            
            // 3) Get movie details from the API with MovieId
            // Movie = await MovieService.GetMovie(MovieId);
        }
        else
        {
            Status = PageState.EnterCode;
        }
    }

    // 4) Methods UI events
    private void CollectTicketsClicked()
    {
        NavigationManager.NavigateTo($"/overview/{_orderCode}");
    }

    private void ResetPage()
    {
        _orderCode = "";
        NavigationManager.NavigateTo("/overview");
    }

    // 5) Methods to get data from the API

    private async Task<ShowDto> GetShowDetails(int i)
    {
        var show = new ShowDto();
        
        if (ShowService != null)
        {
            var shows = await ShowService.GetShows();
            if (shows != null) show = shows.FirstOrDefault(showDto => showDto.Id == i);
        }
        return show ?? new ShowDto();
    }
}