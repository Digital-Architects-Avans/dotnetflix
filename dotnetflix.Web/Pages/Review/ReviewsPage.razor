@page "/reviews"
@using dotnetflix.Api.Services.Contracts
@using dotnetflix.Models.Dtos.Review
@inject ITrustpilotService MockTrustpilotService

<h3>Reviews .NETflix</h3>

<div class="row">
    <div class="col-md-6 text-center">
        <img src="/images/trustpilot.png" class="img-fluid rounded" alt="" style="max-height: 150px;">
        <p>TrustScore @_trustScore.ToString("F1") | @_trustCount reviews </p>
    </div>
    <div class="col-md-6">
            <h5>Submit a Review</h5>
            <EditForm Model="newReview" OnValidSubmit="HandleValidSubmit">
                <div class="form-row">
                    <div class="form-group form-inline col-md-12">
                        <label for="name" class="mr-2">Enter your name:</label>
                        <InputText id="name" class="form-control" @bind-Value="newReview.Name" />
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group form-inline col-md-12">
                        <label for="stars" class="mr-2">Rate our service:</label>
                        <InputSelect id="stars" class="form-control" @bind-Value="newReview.Stars">
                            <option value="">Select...</option>
                            @for (int i = 1; i <= 5; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-12">
                        <label for="reviewText">Write a review:</label>
                        <InputTextArea id="reviewText" class="form-control" @bind-Value="newReview.ReviewText" />
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Submit your review</button>
            </EditForm>
        </div>
</div>


<hr/>
@if (reviews != null)
{
    foreach (var review in reviews)
    {
        <div class="card text-black" style="max-width: 425px;">
            <div class="card-body">
                <p>
                    @for (int i = 0; i < review.Stars; i++)
                    {
                        <img src="/images/star.png" alt="" style="max-height: 25px;">
                    }
                </p>
                <b>@review.Name</b>
                <p>@review.ReviewText</p>
            </div>
        </div>
        <br/>
    }
}
else
{
    <p>No reviews to show here yet... </p>
}


@code {
    private IEnumerable<ReviewDto> reviews;

    private AddReviewDto newReview = new AddReviewDto
    {
        Name = "",
        ReviewText = ""
    };
    private double _trustScore;
    private int _trustCount;

    protected override async Task OnInitializedAsync()
    {
        reviews = await MockTrustpilotService.GetReviews();
        _trustScore = await MockTrustpilotService.GetTrustScore();
        _trustCount = reviews.Count();
    }

    private async Task HandleValidSubmit()
    {
        await MockTrustpilotService.AddReview(newReview);
        newReview = new AddReviewDto(); 
        reviews = await MockTrustpilotService.GetReviews(); 
        _trustScore = await MockTrustpilotService.GetTrustScore();
        _trustCount = reviews.Count();
    }
}