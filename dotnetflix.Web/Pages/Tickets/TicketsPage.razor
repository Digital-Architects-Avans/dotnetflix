@page "/tickets/{ShowId:int}"
@using dotnetflix.Models.Dtos.TicketType
@using dotnetflix.Models.Dtos.OrderRequestDtos
@using dotnetflix.Models.Dtos.Seat
@using dotnetflix.Models.Dtos.TicketOrderDtos
@using System.Globalization
@using dotnetflix.Models.Dtos.Supplement

<h1>Tickets for @MovieTitle</h1>
<h4 style="margin-top: 24px">Seat selection</h4>
<p>Please select your seats:</p>

<SeatSelection ShowId="ShowId" @ref="_seatSelection" OnSeatSelectionChange="OnSeatSelectionChanged"/>

@if (_seatSelection != null && _seatSelection.SelectedSeats.Any() && SelectedShow != null)
{
    <h4 class="mt-3">Ticket type</h4>
    <p>Please select your ticket type:</p>
    <form>
        @foreach (var seat in _seatSelection.SelectedSeats.Take(10))
        {
            var ticketOrder = SelectedTicketOrders.FirstOrDefault(to => to.SeatId == seat.Id);
            <FluentCard Style="max-width: 600px; margin: 16px 0;">
                <dl class="row">
                    <dt class="col-xl-3 col-sm-4">Theater:</dt>
                    <dd class="col-xl-9 col-sm-8">@SelectedShow.TheaterName</dd>
                    <dt class="col-xl-3 col-sm-4">Show Time:</dt>
                    <dd class="col-xl-9 col-sm-8">@SelectedShow.Date.ToString("dd-MM-yyyy - HH:mm", new CultureInfo("nl-NL"))</dd>
                    <dt class="col-xl-3 col-sm-4">Seat:</dt>
                    <dd class="col-xl-9 col-sm-8">Row @seat.RowNumber, Seat @seat.SeatNumber</dd>
                </dl>
                <TicketTypeSelector TicketTypes="TicketTypes" Seat="@seat" ChildDiscountAvailable="ChildDiscountAvailable" OnUpdateSelectedTicketType="UpdateSelectedTicketType"/>
                <FluentDivider Style="margin: 20px 0;"></FluentDivider>
                <SupplementSelector Supplements="Supplements" Seat="@seat" TicketOrder="@ticketOrder" OnUpdateSelectedSupplements="UpdateSelectedSupplements"/>
            </FluentCard>
        }
    </form>
    <button class="btn btn-primary mt-3" @onclick="SummariseOrder">Confirm selection</button>
}


@code {

    [Parameter] public int ShowId { get; set; }

    [Inject] public IShowService? ShowService { get; set; }
    [Inject] public IMovieService? MovieService { get; set; }
    [Inject] public ITicketService? TicketService { get; set; }
    [Inject] public IOrderStateService? OrderStateService { get; set; }
    [Inject] public NavigationManager? NavigationManager { get; set; }

    private SeatSelection? _seatSelection;

    private ShowDto? SelectedShow { get; set; }
    private MovieDto? Movie { get; set; }
    private IEnumerable<TicketTypeDto>? TicketTypes { get; set; }
    private IEnumerable<SupplementDto>? Supplements { get; set; }
    private OrderRequestDto OrderRequest { get; set; } = new OrderRequestDto();
    private string? MovieTitle => SelectedShow?.SneakPreview == true ? "Sneak preview" : SelectedShow?.MovieTitle;
    private bool ChildDiscountAvailable { get; set; }
    private List<TicketOrderDto> SelectedTicketOrders { get; set; } = new List<TicketOrderDto>();

    protected override async Task OnInitializedAsync()
    {
        if (ShowService != null && TicketService != null && MovieService != null)
        {
            SelectedShow = await ShowService.GetShow(ShowId);

            if (SelectedShow != null)
            {
                Movie = await MovieService.GetMovie(SelectedShow.MovieId);
                TicketTypes = await TicketService.GetTicketTypes();
                Supplements = await TicketService.GetSupplements();

                if (Movie != null)
                {
                    ChildDiscountAvailable = Movie.SpokenLanguages == "NL" && SelectedShow.Date.TimeOfDay.Hours < 18;
                }
            }
        }
    }

    private void OnSeatSelectionChanged(List<SeatDto> selectedSeats)
    {
        foreach (var seat in selectedSeats)
        {
            // Check if the seat is already in the list of selected ticket orders, add if not
            var existingSeat = SelectedTicketOrders.FirstOrDefault(to => to.SeatId == seat.Id);
            if (existingSeat == null && Movie != null && SelectedShow != null)
            {
                var ticketOrder = new TicketOrderDto
                {
                    MovieId = Movie.Id,
                    MovieTitle = Movie.Title,
                    TheaterId = SelectedShow.TheaterId,
                    TheaterName = SelectedShow.TheaterName,
                    ShowTime = SelectedShow.Date,
                    ShowId = SelectedShow.Id,
                    SeatId = seat.Id,
                    RowNumber = seat.RowNumber,
                    SeatNumber = seat.SeatNumber,
                    TicketTypeId = 1,
                    Quantity = 1,
                    FinalPrice = 0
                };

                SelectedTicketOrders.Add(ticketOrder);
                Console.WriteLine("Added new ticket order for seat " + seat.Id);
            }
        }

        // Check if seat for ticket orders are still selected, delete if not
        foreach (var seat in SelectedTicketOrders)
        {
            if (selectedSeats.All(s => s.Id != seat.SeatId))
            {
                SelectedTicketOrders.Remove(seat);
                Console.WriteLine("Removed ticket order for seat " + seat.SeatId);
            }
        }
    }

    private void UpdateSelectedTicketType(TicketTypeSelector.TicketTypeChangeArgs args)
    {
        // Find the corresponding ticket order for the seat ID
        var ticketOrder = SelectedTicketOrders.FirstOrDefault(to => to.SeatId == args.SeatId);

        if (ticketOrder != null)
        {
            // Update the ticket type for the selected seat
            ticketOrder.TicketTypeId = args.SelectedTicketTypeId;
        }
    }

    private void UpdateSelectedSupplements(SupplementSelector.SupplementChangeArgs args)
    {
        // Find the corresponding ticket order for the seat ID
        var ticketOrder = SelectedTicketOrders.FirstOrDefault(to => to.SeatId == args.SeatId);

        if (ticketOrder != null)
        {
            // Update the supplements for the selected seat
            var activeSupplements = ticketOrder.SupplementIds;

            if (activeSupplements.Contains(args.SupplementId))
            {
                Console.WriteLine("Removing supplement " + args.SupplementId + " from ticket order for seat " + args.SeatId);
                activeSupplements.Remove(args.SupplementId);
            }
            else
            {
                Console.WriteLine("Adding supplement " + args.SupplementId + " to ticket order for seat " + args.SeatId);
                activeSupplements.Add(args.SupplementId);
            }

            ticketOrder.SupplementIds = activeSupplements;
        }
    }

    private void SummariseOrder()
    {
        // Update the current order request with the selected ticket orders
        OrderRequest.TicketOrders = SelectedTicketOrders;

        foreach (var ticketOrder in OrderRequest.TicketOrders)
        {
            if (TicketTypes != null && SelectedShow != null)
            {
                var ticketType = TicketTypes.FirstOrDefault(tt => tt.Id == ticketOrder.TicketTypeId);
                if (ticketType != null)
                {
                    // Calculate the final price per ticket with the discount applied
                    var finalPricePerTicket = SelectedShow.BasePrice - ticketType.Discount;

                    // Add a surcharge for 3D movies
                    if (SelectedShow.Type == MovieType.ThreeD)
                    {
                        finalPricePerTicket += 2.5m;
                    }

                    // Set discount for sneak preview shows
                    if (SelectedShow.SneakPreview)
                    {
                        finalPricePerTicket -= 2.5m;
                    }

                    // Add cost for selected supplements
                    if (ticketOrder.SupplementIds.Any())
                    {
                        var supplementCost = 0m;
                        foreach (var supplement in ticketOrder.SupplementIds)
                        {
                            if (Supplements != null)
                            {
                                supplementCost += Supplements.FirstOrDefault(s => s.Id == supplement)!.Price;
                            }
                        }

                        finalPricePerTicket += supplementCost;
                    }

                    ticketOrder.FinalPrice = finalPricePerTicket;

                    // Update the FinalPrice in the TicketOrderDto to reflect the total price for the quantity selected
                    // FinalPrice holds the total price for all tickets of this type
                    ticketOrder.FinalPrice *= ticketOrder.Quantity;
                }
            }
        }

        // Save the order request in the OrderStateService
        if (OrderStateService != null) OrderStateService.CurrentOrder = OrderRequest;

        // Navigate to the SeatSelection page
        if (NavigationManager != null) NavigationManager.NavigateTo($"/Checkout/");
    }

}