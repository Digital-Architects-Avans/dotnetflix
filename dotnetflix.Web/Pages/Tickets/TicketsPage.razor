@page "/tickets/{ShowId:int}"
@using dotnetflix.Models.Dtos.TicketType
@using dotnetflix.Models.Dtos.OrderRequestDtos
@using dotnetflix.Models.Dtos.Seat
@using dotnetflix.Models.Dtos.TicketOrderDtos

<h3>Order Tickets for @MovieTitle</h3>

<SeatSelection ShowId="ShowId" @ref="_seatSelection" OnSeatSelectionChange="OnSeatSelectionChanged"/>

@if (_seatSelection != null && _seatSelection.SelectedSeats.Any())
{
    <div class="container mt-4">
        <h4>Select Ticket Types:</h4>
        <form>
            @foreach (var seat in _seatSelection.SelectedSeats.Take(10))
            {
                <TicketTypeSelector TicketTypes="TicketTypes" Seat="@seat" ChildDiscountAvailable="ChildDiscountAvailable" OnUpdateSelectedTicketType="UpdateSelectedTicketType"/>
            }
        </form>
    </div>
    <div class="container">
        <button class="btn btn-primary" @onclick="SummariseOrder">Confirm selection</button>
    </div>
}


@code {

    [Parameter] public int ShowId { get; set; }

    [Inject] public IShowService? ShowService { get; set; }
    [Inject] public IMovieService? MovieService { get; set; }
    [Inject] public ITicketService? TicketService { get; set; }
    [Inject] public IOrderStateService? OrderStateService { get; set; }
    [Inject] public NavigationManager? NavigationManager { get; set; }

    private SeatSelection? _seatSelection;

    private ShowDto? SelectedShow { get; set; }
    private MovieDto? Movie { get; set; }
    private IEnumerable<TicketTypeDto>? TicketTypes { get; set; }
    private OrderRequestDto OrderRequest { get; set; } = new OrderRequestDto();
    public string? MovieTitle => SelectedShow?.SneakPreview == true ? "Sneak preview" : SelectedShow?.MovieTitle;
    private bool ChildDiscountAvailable { get; set; }
    private List<TicketOrderDto> SelectedTicketOrders { get; set; } = new List<TicketOrderDto>();

    protected override async Task OnInitializedAsync()
    {
        if (ShowService != null && TicketService != null && MovieService != null)
        {
            SelectedShow = await ShowService.GetShow(ShowId);

            if (SelectedShow != null)
            {
                Movie = await MovieService.GetMovie(SelectedShow.MovieId);
                TicketTypes = await TicketService.GetTicketTypes();

                if (Movie != null)
                {
                    ChildDiscountAvailable = Movie.SpokenLanguages == "NL" && SelectedShow.Date.TimeOfDay.Hours < 18;
                }
            }
        }
    }
    
    private void OnSeatSelectionChanged(List<SeatDto> selectedSeats)
    {
        // Clear existing ticket orders as they will be recalculated
        SelectedTicketOrders.Clear();

        foreach (var seat in selectedSeats)
        {
            // Create a new TicketOrderDto for each selected seat
            var ticketOrder = new TicketOrderDto
            {
                MovieId = Movie.Id,
                MovieTitle = Movie.Title,
                TheaterId = SelectedShow.TheaterId,
                TheaterName = SelectedShow.TheaterName,
                ShowTime = SelectedShow.Date,
                ShowId = SelectedShow.Id,
                SeatId = seat.Id,
                RowNumber = seat.RowNumber,
                SeatNumber = seat.SeatNumber,
                TicketTypeId = 1,
                Quantity = 1,
                FinalPrice = 0
            };

            SelectedTicketOrders.Add(ticketOrder);
        }
    }
    
    private void UpdateSelectedTicketType(TicketTypeSelector.TicketTypeChangeArgs args)
    {
        // Find the corresponding ticket order for the seat ID
        var ticketOrder = SelectedTicketOrders.FirstOrDefault(to => to.SeatId == args.SeatId);

        if (ticketOrder != null)
        {
            // Update the ticket type for the selected seat
            ticketOrder.TicketTypeId = args.SelectedTicketTypeId;
        }
    }

    private void SummariseOrder()
    {
        // Update the current order request with the selected ticket orders
        OrderRequest.TicketOrders = SelectedTicketOrders;
        
        foreach (var ticketOrder in OrderRequest.TicketOrders)
        {
            var ticketType = TicketTypes.FirstOrDefault(tt => tt.Id == ticketOrder.TicketTypeId);
            if (ticketType != null)
            {
                // Calculate the final price per ticket with the discount applied
                var finalPricePerTicket = SelectedShow.BasePrice - ticketType.Discount;

                if (SelectedShow.Type == MovieType.ThreeD)
                {
                    finalPricePerTicket += 2.5m;
                }
                
                // Set discount for sneak preview shows
                if (SelectedShow.SneakPreview)
                {
                    finalPricePerTicket -= 2.5m;
                }

                ticketOrder.FinalPrice = finalPricePerTicket;

                // Update the FinalPrice in the TicketOrderDto to reflect the total price for the quantity selected
                // FinalPrice holds the total price for all tickets of this type
                ticketOrder.FinalPrice *= ticketOrder.Quantity;
            }
        }

        // Save the order request in the OrderStateService
        OrderStateService.CurrentOrder = OrderRequest;

        // Navigate to the SeatSelection page
        NavigationManager.NavigateTo($"/Checkout/");
    }

}