@* @page "/tickets/{Id:int}" *@
@* @using dotnetflix.Web.Services.Contracts *@
@* @using dotnetflix.Models.Dtos.Movie *@
@* @using dotnetflix.Models.Dtos.Show *@
@* @using dotnetflix.Models.Dtos.TicketType *@
@* @using dotnetflix.Web.Services *@
@* *@
@* <h3>Tickets</h3> *@
@* *@
@* <h3>Order Tickets for @SelectedShow?.MovieTitle</h3> *@
@* *@
@* @if (TicketTypes != null) *@
@* { *@
@*     <EditForm Model="@orderRequest" OnValidSubmit="@ConfirmOrder"> *@
@*         @foreach (var ticketType in TicketTypes) *@
@*         { *@
@*             <div class="form-group"> *@
@*                 <label>@ticketType.Name</label> *@
@*                 <InputNumber @bind-Value="ticketType.Quantity" min="0" class="form-control" /> *@
@*             </div> *@
@*         } *@
@* *@
@*         <button type="submit" class="btn btn-primary">Confirm Selection</button> *@
@*     </EditForm> *@
@* } *@
@* else *@
@* { *@
@*     <p>Loading ticket options...</p> *@
@* } *@
@* *@
@* @code { *@
@*     [Parameter] public int Id { get; set; } *@
@*      *@
@*     [Inject] public IShowService? ShowService { get; set; } *@
@*     [Inject] public ITicketService? TicketService { get; set; } *@
@*      *@
@*     public ShowDto? SelectedShow { get; set; } *@
@*      *@
@*     public string? ErrorMessage { get; set; } *@
@*      *@
@*     private IEnumerable<TicketTypeDto> TicketTypes; *@
@* *@
@*      *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         try *@
@*         { *@
@*             if (ShowService != null && TicketService != null) *@
@*             { *@
@*                 SelectedShow = await ShowService.GetShow(Id); *@
@*                 TicketTypes = await TicketService.GetTicketTypes(); *@
@* *@
@*             } *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             ErrorMessage = ex.Message; *@
@*         } *@
@*     } *@
@* } *@